#ifndef __DATA_BASE_H
#define __DATA_BASE_H
#include "stm32f4xx.h"

static uint8_t Light_plus1[4]={0x00,0xFF,0x0C,~(0x0C)};				// 智能路灯 光源挡位加1
static uint8_t Light_plus2[4]={0x00,0xFF,0x18,~(0x18)};				// 智能路灯 光源挡位加2
static uint8_t Light_plus3[4]={0x00,0xFF,0x5E,~(0x5E)};				// 智能路灯 光源挡位加3

static uint8_t Alarm_Open[6]={0x03,0x05,0x14,0x45,0xDE,0x92};		// 烽火台 开启
static uint8_t Alarm_Close[6]={0x67,0x34,0x78,0xA2,0xFD,0x27};		// 烽火台 关闭

static uint8_t Rotate_1[6]={0xFF,0x14,0x01,0x00,0x00,0x00};		// 立体显示 隧道有事故，请绕行
static uint8_t Rotate_2[6]={0xFF,0x14,0x02,0x00,0x00,0x00};		// 立体显示 前方施工，请绕行
	
static uint8_t Gate_Open[8]={0x55,0x03,0x01,0x01,0x00,0x00,0x02,0xBB};			// 道闸 开启
static uint8_t Gate_Close[8]={0x55,0x03,0x01,0x02,0x00,0x00,0x03,0xBB};			// 道闸 关闭	
static uint8_t Gate_GetStatus[8]={0x55,0x03,0x20,0x02,0x00,0x00,0x03,0xBB};		// 道闸 状态查询

static uint8_t SEG_TimOpen[8]={0x55,0x04,0x03,0x01,0x00,0x00,0x04,0xBB};		// LED显示 计时开启
static uint8_t SMG_TimClose[8]={0x55,0x04,0x03,0x00,0x00,0x00,0x03,0xBB};		// LED显示 计时关闭
static uint8_t SMG_TimClear[8]={0x55,0x04,0x03,0x02,0x00,0x00,0x05,0xBB};		// LED显示 计时清零

static uint8_t TrafficA_Open[8]={0x55,0x0E,0x01,0x00,0x00,0x00,0x01,0xBB};		// 智能交通灯A 进入识别模式 进入识别模式
static uint8_t TrafficA_Red[8]={0x55,0x0E,0x02,0x01,0x00,0x00,0x03,0xBB};		// 智能交通灯A 识别结果为红色请求确认 
static uint8_t TrafficA_Green[8] ={0x55,0x0E,0x02,0x02,0x00,0x00,0x04,0xBB};	// 智能交通灯A 识别结果为绿色请求确认
static uint8_t TrafficA_Yellow[8]={0x55,0x0E,0x02,0x03,0x00,0x00,0x05,0xBB};	// 智能交通灯A 识别结果为黄色请求确认

static uint8_t TrafficB_Open[8]={0x55,0x0F,0x01,0x00,0x00,0x00,0x01,0xBB};		// 智能交通灯B 进入识别模式 进入识别模式
static uint8_t TrafficB_Red[8]={0x55,0x0F,0x02,0x01,0x00,0x00,0x03,0xBB};		// 智能交通灯B 识别结果为红色请求确认 
static uint8_t TrafficB_Green[8] ={0x55,0x0F,0x02,0x02,0x00,0x00,0x04,0xBB};	// 智能交通灯B 识别结果为绿色请求确认
static uint8_t TrafficB_Yellow[8]={0x55,0x0F,0x02,0x03,0x00,0x00,0x05,0xBB};	// 智能交通灯B 识别结果为黄色请求确认

static uint8_t GarageA_To1[8]={0x55,0x0D,0x01,0x01,0x00,0x00,0x02,0xBB};		// 立体车库A 到达第一层
static uint8_t GarageA_To2[8]={0x55,0x0D,0x01,0x02,0x00,0x00,0x03,0xBB};		// 立体车库A 到达第二层
static uint8_t GarageA_To3[8]={0x55,0x0D,0x01,0x03,0x00,0x00,0x04,0xBB};		// 立体车库A 到达第三层
static uint8_t GarageA_To4[8]={0x55,0x0D,0x01,0x04,0x00,0x00,0x05,0xBB};		// 立体车库A 到达第四层
static uint8_t GarageA_Get_Floor[8]={0x55,0x0D,0x02,0x01,0x00,0x00,0x03,0xBB};	// 立体车库A 请求返回车库位于第几层
static uint8_t GarageA_Get_Infr[8]={0x55,0x0D,0x02,0x02,0x00,0x00,0x04,0xBB};	// 立体车库A 请求返回前后侧红外状态

static uint8_t GarageB_To1[8]={0x55,0x05,0x01,0x01,0x00,0x00,0x02,0xBB};		// 立体车库B 到达第一层
static uint8_t GarageB_To2[8]={0x55,0x05,0x01,0x02,0x00,0x00,0x03,0xBB};		// 立体车库B 到达第二层
static uint8_t GarageB_To3[8]={0x55,0x05,0x01,0x03,0x00,0x00,0x04,0xBB};		// 立体车库B 到达第三层
static uint8_t GarageB_To4[8]={0x55,0x05,0x01,0x04,0x00,0x00,0x05,0xBB};		// 立体车库B 到达第四层
static uint8_t GarageB_Get_Floor[8]={0x55,0x05,0x02,0x01,0x00,0x00,0x03,0xBB};	// 立体车库B 请求返回车库位于第几层
static uint8_t GarageB_Get_Infr[8]={0x55,0x05,0x02,0x02,0x00,0x00,0x04,0xBB};	// 立体车库B 请求返回前后侧红外状态

static uint8_t TFT_PageUp[8]={0x55,0x0B,0x10,0x01,0x00,0x00,0x11,0xBB};			// TFT显示器 上翻页
static uint8_t TFT_PageDown[8]={0x55,0x0B,0x10,0x02,0x00,0x00,0x12,0xBB};		// TFT显示器 下翻页

static uint8_t Charge_Open[8]={0x55,0x0A,0x01,0x01,0x00,0x00,0x02,0xBB};		// 无线充电 开启

static uint8_t AGV_Thread1[8]={0x55,0x02,0xA0,0xA1,0x00,0x00,0x41,0xBB};		// 移动机器人控制
static uint8_t AGV_Thread2[8]={0x55,0x02,0xA0,0xA2,0x00,0x00,0x42,0xBB};		// 移动机器人控制

#define Principal_Length 50
#define Follower_Length  50

extern uint8_t Principal_Tab[Principal_Length]; //安卓通信
extern uint8_t Follower_Tab[Follower_Length];

#endif

